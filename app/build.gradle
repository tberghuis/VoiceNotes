apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'kotlin-kapt'

ext {
    appCompatVersion = "1.0.0-rc02"
    constraintLayoutVersion = "1.1.3"
    roomVersion = '1.1.1'
    archLifecycleVersion = '1.1.1'
    coroutines = '0.26.1'
    navigationVersion = "1.0.0-alpha06"
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.tomberghuis.voicenotes"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        vectorDrawables.useSupportLibrary = true

        lintOptions {
            disable 'GoogleAppIndexingWarning'
            abortOnError false
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.recyclerview:recyclerview:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    implementation "android.arch.lifecycle:extensions:$archLifecycleVersion"

    implementation "android.arch.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigationVersion"


    implementation "android.arch.persistence.room:runtime:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"

    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    implementation 'androidx.core:core-ktx:1.0.0-rc02'
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
